{"version":3,"sources":["dataTypes/Timestamp.js","Timesheet.js","App.js","serviceWorker.js","index.js"],"names":["pad","value","toString","padStart","Timestamp","timestamp","toObject","date","time","sorttime","startEntry","setIsMidEntry","completeEntry","renderTime","options","isMidEntry","includeColon","slice","Date","this","moment","getFullYear","getMonth","getDate","getHours","getMinutes","timestring","hours","parseInt","minutes","add","isNaN","timeIsValid","formatTimespan","timespan","toFixed","hashtagRegex","unHash","text","replace","Timesheet","props","startTimeEntry","index","updateTimeProp","x","completeTimeEntry","updateTime","setTime","func","updateEntry","updateSummary","updateIsBreak","isBreak","state","entries","loadEntries","isCopyMode","rowClass","entry","header","className","class","dateHeader","isSame","format","totalHours","label","list","map","Fragment","summary","split","match","elapsed","timeElapsedText","type","ref","timestampRef","autoFocus","maxlength","onChange","event","target","onFocus","onBlur","onKeyDown","arrowKeyFocus","summaryRef","isLast","title","onClick","e","resumeEntry","icon","faPlay","resumeButton","length","faPause","removeEntry","faTrashAlt","copyModeClass","addEntry","disabled","faPlus","toggleCopyMode","faFileAlt","clearAllEntries","filter","reduce","a","b","Object","keys","tags","sort","tag","field","newIndex","keyCode","trim","current","focus","valueFunc","getSortable","setStateWrapper","sourceEntry","startsWith","push","createEntry","React","createRef","splice","setState","confirmAlert","message","buttons","calculateTimeElapsed","saveEntries","i","timestampA","search","forEach","self","indexOf","savedEntries","localStorage","setItem","JSON","stringify","parse","getItem","Component","App","href","rel","aria-label","xmlns","viewBox","focusable","d","fill","fill-rule","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0238fa3a.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst dateTo4DigitTime = value =>\n    value.getHours() * 100 + value.getMinutes();\nconst insertColon = (value) =>\n    value.slice(0, 2) + \":\" + value.slice(2);\nconst pad = (value) => value.toString().padStart(4, \"0\");\nconst timeIsValid = value =>\n    value && !isNaN(value)\n    && 0 <= parseInt(value)\n    && parseInt(value) <= 2359\n    && parseInt(value.slice(-2)) < 60;\n\nexport default class Timestamp {\n    /**\n     * @param {Date} timestamp \n     */\n    constructor(timestamp) {\n        if (timestamp instanceof Date) {\n            this.date = moment(new Date(\n                timestamp.getFullYear(),\n                timestamp.getMonth(),\n                timestamp.getDate()));\n            this.time = dateTo4DigitTime(timestamp);\n            this.sorttime = this.time;\n            this.isMidEntry = false;\n        }\n        else {\n            this.date = moment(new Date(timestamp.date));\n            this.time = timestamp.time;\n            this.sorttime = timestamp.sorttime;\n            this.setIsMidEntry(false);\n        }\n    }\n\n    toObject = () => {\n        return {\n            date: this.date,\n            time: this.time,\n            sorttime: this.sorttime\n        };\n    }\n\n    getSortable() {\n        const timestring = pad(this.sorttime);\n        const hours = parseInt(timestring.slice(0, 2));\n        const minutes = parseInt(timestring.slice(2)) + (hours * 60);\n        return moment(this.date).add(minutes, 'm');\n    }\n\n    startEntry = () => this.setIsMidEntry(true);\n    completeEntry = () => this.setIsMidEntry(false);\n\n    renderTime = (options) => this.isMidEntry\n        ? this.time.toString()\n        : options && options.includeColon\n            ? insertColon(pad(this.time))\n            : pad(this.time);\n\n    setIsMidEntry(value) {\n        this.isMidEntry = value;\n        if (!value) {\n            if (timeIsValid(this.time.toString())) {\n                this.sorttime = this.time;\n            } else {\n                this.time = this.sorttime;\n            }\n        }\n        return this;\n    }\n\n    setTime(value) {\n        if (!value) {\n            value = 0;\n        }\n        if (!isNaN(value)) {\n            this.time = parseInt(value);\n        }\n        return this;\n    }\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileAlt, faPlay, faPlus, faPause, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport Timestamp from './dataTypes/Timestamp.js';\n\nconst timeDiff = (timestampA, timestampB) =>\n    timestampB.getSortable() - timestampA.getSortable();\n\nconst formatTimespan = (timespan) =>\n        (timespan / 1000 / 60 / 60).toFixed(2) + \"h\";\n\nconst hashtagRegex = /#[\\w-]+/g;\n\nconst findHashtagEntries = entries => \n    entries.filter(x => x.summary.search(hashtagRegex) >= 0);\n\nconst getHashtags = text => text.match(hashtagRegex);\n\nconst unHash = text => text.replace(/#/, \"\").replace(/-/g, \" \");\n\nexport default class Timesheet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            entries: this.loadEntries(),\n            isCopyMode: false,\n        };\n    }\n    render() {\n        const rowClass = entry =>\n            \"input-group\"\n            + (entry.isBreak ? \" break-entry\" : \"\");\n        const resumeButton = (entry, index, isLast) => isLast\n            ? \"\"\n            : (\n                <button class=\"btn btn-outline-secondary\" type=\"button\"\n                        title=\"Add a new entry to resume this task.\"\n                        onClick={e => this.resumeEntry(index)}>\n                    <FontAwesomeIcon icon={faPlay} />\n                </button>\n            );\n        const timeElapsedText = (entry, index) =>\n            entry.elapsed\n                ? \"(\" + formatTimespan(entry.elapsed) + \")\"\n                : \"\";\n        const header = (text, className) => (\n            <div class={\"border-bottom mt-4 mb-2 \" + className}>\n                <small>{text}</small>\n            </div>\n        );\n        const dateHeader = (entry, index, className) =>\n            index === 0 || !this.state.entries[index - 1].timestamp.date.isSame(entry.timestamp.date)\n                ? header(\n                    entry.timestamp.date.format(\"YYYY-MM-DD dddd\"),\n                    className)\n                : \"\";\n        const editModeMapping = (entry, index) => (\n            <React.Fragment>\n                {dateHeader(entry, index)}\n                <div class={rowClass(entry)}>\n                    <input type=\"text\" class=\"form-control timestamp\"\n                        ref={entry.timestampRef}\n                        autoFocus\n                        maxlength=\"4\"\n                        value={entry.timestamp.renderTime()}\n                        onChange={(event) => this.updateTime(index, event.target.value)}\n                        onFocus={() => this.startTimeEntry(index)}\n                        onBlur={() => this.completeTimeEntry(index)}\n                        onKeyDown={(event) => this.arrowKeyFocus(index, event, \"timestamp\")} />\n                    <input type=\"text\" class=\"form-control\"\n                        ref={entry.summaryRef}\n                        value={entry.summary}\n                        onChange={(event) => this.updateSummary(index, event.target.value)}\n                        onKeyDown={(event) => this.arrowKeyFocus(index, event, \"summary\")} />\n                    <div class=\"input-group-append\">\n                        {resumeButton(entry, index, index === this.state.entries.length - 1)}\n                        <button class={\"btn \" + (entry.isBreak ? \"btn-secondary\" : \"btn-outline-secondary\")} type=\"button\"\n                            title=\"Toggle break.\"\n                            onClick={e => this.updateIsBreak(index)}>\n                                <FontAwesomeIcon icon={faPause} />\n                            </button>\n                        <button class=\"btn btn-outline-danger\" type=\"button\"\n                            title=\"Remove entry.\"\n                            onClick={(e) => this.removeEntry(index)}>\n                                <FontAwesomeIcon icon={faTrashAlt} />\n                        </button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n        const copyModeSummary = summary =>\n            summary\n                .replace(hashtagRegex, x => `|${x}|`)\n                .split(\"|\")\n                .map(x =>\n                    x.match(hashtagRegex)\n                        ? (<strong>{unHash(x)}</strong>)\n                        : (<React.Fragment>{x}</React.Fragment>));\n        const copyModeMapping = (entry, index) => (\n            <React.Fragment>\n                {dateHeader(entry, index, \"row\")}    \n                <div class={\"row p-1\" + (entry.isBreak ? \" break-entry\" : \"\")}>\n                    <span class=\"col-xs-1\">\n                        {entry.timestamp.renderTime({includeColon: true})}\n                    </span>\n                    <span> </span>\n                    <span class=\"col\">\n                        {copyModeSummary(entry.summary)}\n                    </span>\n                    <span> </span>\n                    <span class=\"col-xs-2 elapsed-time\">\n                        {timeElapsedText(entry, index)}\n                    </span>\n                </div>\n            </React.Fragment>\n        );\n        const totalHours = (label, value) => (\n            <div class=\"col-sm\">\n                <strong>{label}: </strong>\n                <span>{formatTimespan(value)}</span>\n            </div>\n        );\n        const hashtagTotalMapping = (tag) =>\n            totalHours(unHash(tag), this.state.tags[tag]);\n        const list = this.state.entries.map(\n            this.state.isCopyMode ? copyModeMapping : editModeMapping);\n        const copyModeClass = \"btn ml-1 \" + (this.state.isCopyMode\n             ? \"btn-secondary\"\n             : \"btn-outline-secondary\");\n        return (\n            <div class=\"container\">\n                {list}\n                <div class=\"mt-2\">\n                    <button class=\"btn btn-primary\" type='button'\n                        title=\"Add an entry.\"\n                        onClick={() => this.addEntry()}\n                        disabled={this.state.isCopyMode}>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </button> \n                    <button class=\"btn btn-secondary ml-1\" type=\"button\"\n                        title=\"Take a break.\"\n                        onClick={(e) => this.addEntry(\"Break\", true)}\n                        disabled={this.state.isCopyMode}>\n                        <FontAwesomeIcon icon={faPause} />\n                    </button>\n                    <button class={copyModeClass} type=\"button\"\n                        title=\"Toggle Copy/Report Mode\"\n                        onClick={() => this.toggleCopyMode()}>\n                        <FontAwesomeIcon icon={faFileAlt} />\n                    </button>\n                    <button class=\"btn btn-danger ml-1\" type=\"button\"\n                        title=\"Clear all entries.\"\n                        onClick={() => this.clearAllEntries()}>\n                        <FontAwesomeIcon icon={faTrashAlt} />\n                    </button>\n                </div>\n                <div class=\"mb-2\">\n                    {header(\"Totals\")}\n                    <p>\n                        Use #Hashtagged-Category-Names to categorize time entries.\n                        The last entry doesn't count toward totals.\n                    </p>\n                    <div class=\"row\">\n                        {totalHours(\n                            \"Total Uptime\",\n                            this.state.entries\n                                .filter(x => !x.isBreak)\n                                .map(x => x.elapsed)\n                                .reduce((a, b) => (a || 0) + (b || 0), 0))}\n                        {Object.keys(this.state.tags || []).sort().map(hashtagTotalMapping)}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    \n    arrowKeyFocus(index, event, field) {\n        let newIndex = index;\n        if (event.keyCode === 38) { // up\n            if (index <= 0) return;\n            newIndex -= 1;\n        }\n        else if (event.keyCode === 40 || event.keyCode === 13) { // down or enter\n            if (index >= this.state.entries.length - 1) {\n                // only add if the last entry has text\n                if (this.state.entries[index].summary.trim() !== \"\") {\n                    this.addEntry();\n                }\n                return;\n            }\n            newIndex += 1;\n        }\n        else {\n            return;\n        }\n        this.state.entries[newIndex][field + \"Ref\"].current.focus();\n    }\n\n    startTimeEntry = (index) =>\n        this.updateTimeProp(index, x => x.startEntry());\n    \n    completeTimeEntry = (index) =>\n        this.updateTimeProp(index, x => x.completeEntry());\n    \n    updateTime = (index, value) =>\n        this.updateTimeProp(index, x => x.setTime(value));\n    \n    updateTimeProp = (index, func) =>\n        this.updateEntry(\n            index,\n            \"timestamp\",\n             x => func(x.timestamp));\n\n    updateSummary = (index, value) =>\n        this.updateEntry(index, \"summary\", value);\n    \n    updateIsBreak = (index) =>\n        this.updateEntry(index, \"isBreak\", x => !x.isBreak);\n\n    updateEntry(index, field, valueFunc) {\n        if (typeof(valueFunc) !== \"function\") {\n            const value = valueFunc;\n            valueFunc = x => value;\n        }\n        let entries = this.state.entries;\n        entries[index][field] = valueFunc(entries[index]);\n        entries.sort((a, b) =>\n            a.timestamp.getSortable() - b.timestamp.getSortable());\n        this.setStateWrapper({entries});\n    }\n\n    resumeEntry(index) {\n        const resumeText = \"Resume \";\n        var sourceEntry = this.state.entries[index];\n        var text = sourceEntry.summary;\n        text = !text.startsWith(resumeText) ? resumeText + text : text;\n        this.addEntry(text, sourceEntry.isBreak);\n    }\n\n    addEntry(text, isBreak) {\n        if (!text) {\n            text = '';\n        }\n        let entries = this.state.entries;\n        entries.push(this.createEntry({\n            timestamp: new Timestamp(new Date()),\n            summary: text,\n            isBreak: !!isBreak\n        }));\n        this.setStateWrapper({entries});\n    }\n\n    createEntry(props) {\n        return {\n            timestamp: props.timestamp,\n            summary: props.summary,\n            isBreak: !!props.isBreak,\n\n            timestampRef: React.createRef(),\n            summaryRef: React.createRef()\n        };\n    }\n\n    removeEntry(index) {\n        let entries = this.state.entries;\n        entries.splice(index, 1);\n        this.setStateWrapper({entries});\n    }\n\n    toggleCopyMode() {\n        let isCopyMode = !this.state.isCopyMode;\n        this.setState({isCopyMode});\n    }\n\n    clearAllEntries() {\n        confirmAlert({\n            title: \"Clear all entries\",\n            message: \"Are you sure?\",\n            buttons: [\n                {\n                    label: \"Yes, Clear\",\n                    onClick: () => {\n                        const entries = [];\n                        this.setState({entries});\n                    }\n                },\n                {\n                    label: \"No, Cancel\"\n                }\n            ]\n        });\n    }\n\n    setStateWrapper(state) {\n        this.calculateTimeElapsed(state);\n        this.setState(state);\n        this.saveEntries(this.state.entries);\n    }\n\n    calculateTimeElapsed(state) {\n        for (let i = 0; i < state.entries.length; i++) {\n            const entry = state.entries[i];\n            entry.elapsed = i + 1 < state.entries.length\n                ? timeDiff(\n                    entry.timestamp,\n                    state.entries[i + 1].timestamp)\n                : null;\n        }\n\n        // regenerate tag entries\n        state.tags = [];\n        const taggedEntries = findHashtagEntries(state.entries);\n        taggedEntries.forEach(entry => {\n            var tags = getHashtags(entry.summary)\n                // distinct tags\n                .filter((value, index, self) => self.indexOf(value) === index);\n            tags.forEach(tag => {\n                state.tags[tag] = (state.tags[tag] || 0) + entry.elapsed;\n            });\n        });\n    }\n\n    saveEntries(entries) {\n        const savedEntries = entries.map(entry => {\n            return {\n                timestamp: entry.timestamp.toObject(),\n                summary: entry.summary,\n                isBreak: entry.isBreak\n            };\n        });\n        localStorage.setItem(\"entries\", JSON.stringify(savedEntries));\n    }\n\n    loadEntries() {\n        let entries = JSON.parse(localStorage.getItem(\"entries\"));\n        if (entries) {\n            // re-cast timestamps according to class\n            for(let i = 0; i < entries.length; i++) {\n                entries[i].timestamp = new Timestamp(entries[i].timestamp);\n                entries[i] = this.createEntry(entries[i]);\n            }\n        }\n        return entries || [];\n    }\n}\n","import React from 'react';\nimport Timesheet from './Timesheet.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\".\">\n          Timestamper\n        </a>\n\n        <a class=\"nav-link p-2\" href=\"https://github.com/aaaantoine/timestamper\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"GitHub\">\n          <svg class=\"navbar-nav-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 499.36\" focusable=\"false\">\n            <title>GitHub</title>\n            <path d=\"M256 0C114.64 0 0 114.61 0 256c0 113.09 73.34 209 175.08 242.9 12.8 2.35 17.47-5.56 17.47-12.34 0-6.08-.22-22.18-.35-43.54-71.2 15.49-86.2-34.34-86.2-34.34-11.64-29.57-28.42-37.45-28.42-37.45-23.27-15.84 1.73-15.55 1.73-15.55 25.69 1.81 39.21 26.38 39.21 26.38 22.84 39.12 59.92 27.82 74.5 21.27 2.33-16.54 8.94-27.82 16.25-34.22-56.84-6.43-116.6-28.43-116.6-126.49 0-27.95 10-50.8 26.35-68.69-2.63-6.48-11.42-32.5 2.51-67.75 0 0 21.49-6.88 70.4 26.24a242.65 242.65 0 0 1 128.18 0c48.87-33.13 70.33-26.24 70.33-26.24 14 35.25 5.18 61.27 2.55 67.75 16.41 17.9 26.31 40.75 26.31 68.69 0 98.35-59.85 120-116.88 126.32 9.19 7.9 17.38 23.53 17.38 47.41 0 34.22-.31 61.83-.31 70.23 0 6.85 4.61 14.81 17.6 12.31C438.72 464.97 512 369.08 512 256.02 512 114.62 397.37 0 256 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\n          </svg>\n        </a>\n      </nav>\n      \n      <Timesheet />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}