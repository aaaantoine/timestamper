{"version":3,"sources":["utils/formatting.js","components/header.js","utils/hashtagging.js","components/Report.js","components/Totals.js","dataTypes/Timestamp.js","Timesheet.js","App.js","serviceWorker.js","index.js"],"names":["formatTimespan","timespan","toFixed","header","text","className","class","dateHeader","entries","index","timestamp","date","isSame","format","hashtagRegex","unHash","replace","Report","this","props","map","entry","Fragment","isBreak","renderTime","includeColon","summary","x","split","match","elapsed","timeElapsedText","React","Component","totalHours","label","value","Totals","displayHelp","filter","reduce","a","b","Object","keys","tags","sort","tag","pad","toString","padStart","Timestamp","toObject","time","sorttime","startEntry","setIsMidEntry","completeEntry","options","isMidEntry","slice","Date","moment","getFullYear","getMonth","getDate","getHours","getMinutes","timestring","hours","parseInt","minutes","add","isNaN","timeIsValid","Timesheet","startTimeEntry","updateTimeProp","completeTimeEntry","updateTime","setTime","func","updateEntry","updateSummary","updateIsBreak","toggleCopyMode","updateCopyMode","state","isCopyMode","loadEntries","rowClass","editModeMapping","type","ref","timestampRef","autoFocus","maxlength","onChange","event","target","onFocus","onBlur","onKeyDown","arrowKeyFocus","summaryRef","isLast","title","onClick","e","resumeEntry","icon","faPlay","resumeButton","length","faPause","removeEntry","faTrashAlt","list","addEntry","disabled","faPlus","clearAllEntries","field","newIndex","keyCode","trim","current","focus","valueFunc","getSortable","setStateWrapper","sourceEntry","startsWith","push","createEntry","createRef","splice","setState","confirmAlert","message","buttons","calculateTimeElapsed","saveEntries","i","timestampA","search","forEach","self","indexOf","savedEntries","localStorage","setItem","JSON","stringify","parse","getItem","App","href","rel","aria-label","xmlns","viewBox","focusable","d","fill","fill-rule","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e303c42e.chunk.js","sourcesContent":["export const formatTimespan = (timespan) =>\n    (timespan / 1000 / 60 / 60).toFixed(2) + \"h\";\n\nexport const dateFormatString = \"YYYY-MM-DD dddd\";\n","import React from 'react';\nimport { dateFormatString } from '../utils/formatting.js'\n\nexport const header = (text, className) => (\n    <div class={\"border-bottom mt-4 mb-2 \" + className}>\n        <small>{text}</small>\n    </div>\n);\n\nexport const dateHeader = (entries, index, className) =>\n    index === 0 || !entries[index - 1].timestamp.date.isSame(entries[index].timestamp.date)\n        ? header(\n            entries[index].timestamp.date.format(dateFormatString),\n            className)\n        : \"\";\n","export const hashtagRegex = /#[\\w-]+/g;\n\nexport const findHashtagEntries = entries => \n    entries.filter(x => x.summary.search(hashtagRegex) >= 0);\n\nexport const getHashtags = text => text.match(hashtagRegex);\n\nexport const unHash = text => text.replace(/#/, \"\").replace(/-/g, \" \");\n","import React from 'react';\n\nimport { dateHeader } from './header.js';\n\nimport { formatTimespan } from '../utils/formatting.js';\nimport { hashtagRegex, unHash } from '../utils/hashtagging.js';\n\nconst copyModeSummary = summary =>\n    summary\n        .replace(hashtagRegex, x => `|${x}|`)\n        .split(\"|\")\n        .map(x =>\n            x.match(hashtagRegex)\n                ? (<strong>{unHash(x)}</strong>)\n                : (<React.Fragment>{x}</React.Fragment>));\n                \nconst timeElapsedText = (entry) =>\n    entry.elapsed\n        ? \"(\" + formatTimespan(entry.elapsed) + \")\"\n        : \"\";\n\nexport default class Report extends React.Component {\n    render() {\n        const copyModeMapping = (entry, index) => (\n            <React.Fragment>\n                {dateHeader(this.props.entries, index, \"row\")}    \n                <div class={\"row p-1\" + (entry.isBreak ? \" break-entry\" : \"\")}>\n                    <span class=\"col-xs-1\">\n                        {entry.timestamp.renderTime({includeColon: true})}\n                    </span>\n                    <span> </span>\n                    <span class=\"col\">\n                        {copyModeSummary(entry.summary)}\n                    </span>\n                    <span> </span>\n                    <span class=\"col-xs-2 elapsed-time\">\n                        {timeElapsedText(entry)}\n                    </span>\n                </div>\n            </React.Fragment>\n        );\n\n        return this.props.entries.map(copyModeMapping); \n    }\n}\n","import React from 'react';\n\nimport { formatTimespan } from '../utils/formatting.js';\nimport { unHash } from '../utils/hashtagging.js';\n\nconst totalHours = (label, value) => (\n    <div class=\"col-sm\">\n        <strong>{label}: </strong>\n        <span>{formatTimespan(value)}</span>\n    </div>\n);\n\nexport default class Totals extends React.Component {\n    render() {\n        const hashtagTotalMapping = (tag) =>\n            totalHours(unHash(tag), this.props.tags[tag]);\n\n        return (\n            <React.Fragment>\n                {this.props.displayHelp\n                    ? (<p>\n                        Use #Hashtagged-Category-Names to categorize time entries.\n                        The last entry doesn't count toward totals.\n                    </p>)\n                    : \"\"}\n                <div class=\"row\">\n                    {totalHours(\n                        \"Total Uptime\",\n                        this.props.entries\n                            .filter(x => !x.isBreak)\n                            .map(x => x.elapsed)\n                            .reduce((a, b) => (a || 0) + (b || 0), 0))}\n                    {Object.keys(this.props.tags || []).sort().map(hashtagTotalMapping)}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import moment from 'moment';\n\nconst dateTo4DigitTime = value =>\n    value.getHours() * 100 + value.getMinutes();\nconst insertColon = (value) =>\n    value.slice(0, 2) + \":\" + value.slice(2);\nconst pad = (value) => value.toString().padStart(4, \"0\");\nconst timeIsValid = value =>\n    value && !isNaN(value)\n    && 0 <= parseInt(value)\n    && parseInt(value) <= 2359\n    && parseInt(value.slice(-2)) < 60;\n\nexport default class Timestamp {\n    /**\n     * @param {Date} timestamp \n     */\n    constructor(timestamp) {\n        if (timestamp instanceof Date) {\n            this.date = moment(new Date(\n                timestamp.getFullYear(),\n                timestamp.getMonth(),\n                timestamp.getDate()));\n            this.time = dateTo4DigitTime(timestamp);\n            this.sorttime = this.time;\n            this.isMidEntry = false;\n        }\n        else {\n            this.date = moment(new Date(timestamp.date));\n            this.time = timestamp.time;\n            this.sorttime = timestamp.sorttime;\n            this.setIsMidEntry(false);\n        }\n    }\n\n    toObject = () => {\n        return {\n            date: this.date,\n            time: this.time,\n            sorttime: this.sorttime\n        };\n    }\n\n    getSortable() {\n        const timestring = pad(this.sorttime);\n        const hours = parseInt(timestring.slice(0, 2));\n        const minutes = parseInt(timestring.slice(2)) + (hours * 60);\n        return moment(this.date).add(minutes, 'm');\n    }\n\n    startEntry = () => this.setIsMidEntry(true);\n    completeEntry = () => this.setIsMidEntry(false);\n\n    renderTime = (options) => this.isMidEntry\n        ? this.time.toString()\n        : options && options.includeColon\n            ? insertColon(pad(this.time))\n            : pad(this.time);\n\n    setIsMidEntry(value) {\n        this.isMidEntry = value;\n        if (!value) {\n            if (timeIsValid(this.time.toString())) {\n                this.sorttime = this.time;\n            } else {\n                this.time = this.sorttime;\n            }\n        }\n        return this;\n    }\n\n    setTime(value) {\n        if (!value) {\n            value = 0;\n        }\n        if (!isNaN(value)) {\n            this.time = parseInt(value);\n        }\n        return this;\n    }\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPlus, faPause, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nimport { header, dateHeader } from './components/header.js';\nimport Report from './components/Report.js';\nimport Totals from './components/Totals.js';\n\nimport Timestamp from './dataTypes/Timestamp.js';\n\nimport { findHashtagEntries, getHashtags } from './utils/hashtagging.js';\n\nconst timeDiff = (timestampA, timestampB) =>\n    timestampB.getSortable() - timestampA.getSortable();\n\nexport default class Timesheet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            entries: this.loadEntries(),\n            isCopyMode: false,\n        };\n    }\n    render() {\n        const rowClass = entry =>\n            \"input-group\"\n            + (entry.isBreak ? \" break-entry\" : \"\");\n        const resumeButton = (entry, index, isLast) => isLast\n            ? \"\"\n            : (\n                <button class=\"btn btn-outline-secondary\" type=\"button\"\n                        title=\"Add a new entry to resume this task.\"\n                        onClick={e => this.resumeEntry(index)}>\n                    <FontAwesomeIcon icon={faPlay} />\n                </button>\n            );\n        const editModeMapping = (entry, index) => (\n            <React.Fragment>\n                {dateHeader(this.state.entries, index)}\n                <div class={rowClass(entry)}>\n                    <input type=\"text\" class=\"form-control timestamp\"\n                        ref={entry.timestampRef}\n                        autoFocus\n                        maxlength=\"4\"\n                        value={entry.timestamp.renderTime()}\n                        onChange={(event) => this.updateTime(index, event.target.value)}\n                        onFocus={() => this.startTimeEntry(index)}\n                        onBlur={() => this.completeTimeEntry(index)}\n                        onKeyDown={(event) => this.arrowKeyFocus(index, event, \"timestamp\")} />\n                    <input type=\"text\" class=\"form-control\"\n                        ref={entry.summaryRef}\n                        value={entry.summary}\n                        onChange={(event) => this.updateSummary(index, event.target.value)}\n                        onKeyDown={(event) => this.arrowKeyFocus(index, event, \"summary\")} />\n                    <div class=\"input-group-append\">\n                        {resumeButton(entry, index, index === this.state.entries.length - 1)}\n                        <button class={\"btn \" + (entry.isBreak ? \"btn-secondary\" : \"btn-outline-secondary\")} type=\"button\"\n                            title=\"Toggle break.\"\n                            onClick={e => this.updateIsBreak(index)}>\n                                <FontAwesomeIcon icon={faPause} />\n                            </button>\n                        <button class=\"btn btn-outline-danger\" type=\"button\"\n                            title=\"Remove entry.\"\n                            onClick={(e) => this.removeEntry(index)}>\n                                <FontAwesomeIcon icon={faTrashAlt} />\n                        </button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n        const editModeView = () => (\n            <React.Fragment>\n                {this.state.entries.map(editModeMapping)}\n                <div class=\"mt-2\">\n                    <button class=\"btn btn-primary\" type='button'\n                        title=\"Add an entry.\"\n                        onClick={() => this.addEntry()}\n                        disabled={this.state.isCopyMode}>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </button> \n                    <button class=\"btn btn-secondary ml-1\" type=\"button\"\n                        title=\"Take a break.\"\n                        onClick={(e) => this.addEntry(\"Break\", true)}\n                        disabled={this.state.isCopyMode}>\n                        <FontAwesomeIcon icon={faPause} />\n                    </button>\n                    <button class=\"btn btn-danger ml-1\" type=\"button\"\n                        title=\"Clear all entries.\"\n                        onClick={() => this.clearAllEntries()}>\n                        <FontAwesomeIcon icon={faTrashAlt} />\n                    </button>\n                </div>\n            </React.Fragment>\n        );\n        const copyModeView = () => (<Report entries={this.state.entries} />);\n        const list = this.state.isCopyMode ? copyModeView() : editModeView();\n        return (\n            <div class=\"container\">\n                <ul class=\"nav nav-tabs\">\n                    <li class=\"nav-item\">\n                        <button type=\"button\"\n                            class={`nav-link ${!this.state.isCopyMode ? \"active\" : \"\"}`}\n                            onClick={() => this.updateCopyMode(false)}>Entry</button>\n                    </li>\n                    <li class=\"nav-item\">\n                        <button type=\"button\"\n                            class={`nav-link ${this.state.isCopyMode ? \"active\" : \"\"}`}\n                            onClick={() => this.updateCopyMode(true)}>Report</button>\n                    </li>\n                </ul>\n                {list}\n                {header(\"Totals\", this.state.isCopyMode ? \"row\" : \"\")}\n                <Totals\n                    entries={this.state.entries}\n                    tags={this.state.tags}\n                    displayHelp={!this.state.isCopyMode} />\n            </div>\n        );\n    }\n    \n    arrowKeyFocus(index, event, field) {\n        let newIndex = index;\n        if (event.keyCode === 38) { // up\n            if (index <= 0) return;\n            newIndex -= 1;\n        }\n        else if (event.keyCode === 40 || event.keyCode === 13) { // down or enter\n            if (index >= this.state.entries.length - 1) {\n                // only add if the last entry has text\n                if (this.state.entries[index].summary.trim() !== \"\") {\n                    this.addEntry();\n                }\n                return;\n            }\n            newIndex += 1;\n        }\n        else {\n            return;\n        }\n        this.state.entries[newIndex][field + \"Ref\"].current.focus();\n    }\n\n    startTimeEntry = (index) =>\n        this.updateTimeProp(index, x => x.startEntry());\n    \n    completeTimeEntry = (index) =>\n        this.updateTimeProp(index, x => x.completeEntry());\n    \n    updateTime = (index, value) =>\n        this.updateTimeProp(index, x => x.setTime(value));\n    \n    updateTimeProp = (index, func) =>\n        this.updateEntry(\n            index,\n            \"timestamp\",\n             x => func(x.timestamp));\n\n    updateSummary = (index, value) =>\n        this.updateEntry(index, \"summary\", value);\n    \n    updateIsBreak = (index) =>\n        this.updateEntry(index, \"isBreak\", x => !x.isBreak);\n\n    updateEntry(index, field, valueFunc) {\n        if (typeof(valueFunc) !== \"function\") {\n            const value = valueFunc;\n            valueFunc = x => value;\n        }\n        let entries = this.state.entries;\n        entries[index][field] = valueFunc(entries[index]);\n        entries.sort((a, b) =>\n            a.timestamp.getSortable() - b.timestamp.getSortable());\n        this.setStateWrapper({entries});\n    }\n\n    resumeEntry(index) {\n        const resumeText = \"Resume \";\n        var sourceEntry = this.state.entries[index];\n        var text = sourceEntry.summary;\n        text = !text.startsWith(resumeText) ? resumeText + text : text;\n        this.addEntry(text, sourceEntry.isBreak);\n    }\n\n    addEntry(text, isBreak) {\n        if (!text) {\n            text = '';\n        }\n        let entries = this.state.entries;\n        entries.push(this.createEntry({\n            timestamp: new Timestamp(new Date()),\n            summary: text,\n            isBreak: !!isBreak\n        }));\n        this.setStateWrapper({entries});\n    }\n\n    createEntry(props) {\n        return {\n            timestamp: props.timestamp,\n            summary: props.summary,\n            isBreak: !!props.isBreak,\n\n            timestampRef: React.createRef(),\n            summaryRef: React.createRef()\n        };\n    }\n\n    removeEntry(index) {\n        let entries = this.state.entries;\n        entries.splice(index, 1);\n        this.setStateWrapper({entries});\n    }\n\n    toggleCopyMode = () => this.updateCopyMode(!this.state.isCopyMode);\n    updateCopyMode(value) {\n        let isCopyMode = value;\n        this.setState({isCopyMode});\n    }\n\n    clearAllEntries() {\n        confirmAlert({\n            title: \"Clear all entries\",\n            message: \"Are you sure?\",\n            buttons: [\n                {\n                    label: \"Yes, Clear\",\n                    onClick: () => {\n                        const entries = [];\n                        this.setState({entries});\n                    }\n                },\n                {\n                    label: \"No, Cancel\"\n                }\n            ]\n        });\n    }\n\n    setStateWrapper(state) {\n        this.calculateTimeElapsed(state);\n        this.setState(state);\n        this.saveEntries(this.state.entries);\n    }\n\n    calculateTimeElapsed(state) {\n        for (let i = 0; i < state.entries.length; i++) {\n            const entry = state.entries[i];\n            entry.elapsed = i + 1 < state.entries.length\n                ? timeDiff(\n                    entry.timestamp,\n                    state.entries[i + 1].timestamp)\n                : null;\n        }\n\n        // regenerate tag entries\n        state.tags = [];\n        const taggedEntries = findHashtagEntries(state.entries);\n        taggedEntries.forEach(entry => {\n            var tags = getHashtags(entry.summary)\n                // distinct tags\n                .filter((value, index, self) => self.indexOf(value) === index);\n            tags.forEach(tag => {\n                state.tags[tag] = (state.tags[tag] || 0) + entry.elapsed;\n            });\n        });\n    }\n\n    saveEntries(entries) {\n        const savedEntries = entries.map(entry => {\n            return {\n                timestamp: entry.timestamp.toObject(),\n                summary: entry.summary,\n                isBreak: entry.isBreak\n            };\n        });\n        localStorage.setItem(\"entries\", JSON.stringify(savedEntries));\n    }\n\n    loadEntries() {\n        let entries = JSON.parse(localStorage.getItem(\"entries\"));\n        if (entries) {\n            // re-cast timestamps according to class\n            for(let i = 0; i < entries.length; i++) {\n                entries[i].timestamp = new Timestamp(entries[i].timestamp);\n                entries[i] = this.createEntry(entries[i]);\n            }\n        }\n        return entries || [];\n    }\n}\n","import React from 'react';\nimport Timesheet from './Timesheet.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\".\">\n          Timestamper\n        </a>\n\n        <a class=\"nav-link p-2\" href=\"https://github.com/aaaantoine/timestamper\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"GitHub\">\n          <svg class=\"navbar-nav-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 499.36\" focusable=\"false\">\n            <title>GitHub</title>\n            <path d=\"M256 0C114.64 0 0 114.61 0 256c0 113.09 73.34 209 175.08 242.9 12.8 2.35 17.47-5.56 17.47-12.34 0-6.08-.22-22.18-.35-43.54-71.2 15.49-86.2-34.34-86.2-34.34-11.64-29.57-28.42-37.45-28.42-37.45-23.27-15.84 1.73-15.55 1.73-15.55 25.69 1.81 39.21 26.38 39.21 26.38 22.84 39.12 59.92 27.82 74.5 21.27 2.33-16.54 8.94-27.82 16.25-34.22-56.84-6.43-116.6-28.43-116.6-126.49 0-27.95 10-50.8 26.35-68.69-2.63-6.48-11.42-32.5 2.51-67.75 0 0 21.49-6.88 70.4 26.24a242.65 242.65 0 0 1 128.18 0c48.87-33.13 70.33-26.24 70.33-26.24 14 35.25 5.18 61.27 2.55 67.75 16.41 17.9 26.31 40.75 26.31 68.69 0 98.35-59.85 120-116.88 126.32 9.19 7.9 17.38 23.53 17.38 47.41 0 34.22-.31 61.83-.31 70.23 0 6.85 4.61 14.81 17.6 12.31C438.72 464.97 512 369.08 512 256.02 512 114.62 397.37 0 256 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\n          </svg>\n        </a>\n      </nav>\n      \n      <Timesheet />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}