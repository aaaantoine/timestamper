{"version":3,"sources":["dataTypes/Timestamp.js","Timesheet.js","App.js","serviceWorker.js","index.js"],"names":["pad","value","toString","padStart","Timestamp","timestamp","toObject","date","time","sorttime","startEntry","setIsMidEntry","completeEntry","renderTime","options","isMidEntry","includeColon","slice","Date","this","moment","getFullYear","getMonth","getDate","getHours","getMinutes","timestring","hours","parseInt","minutes","add","isNaN","timeIsValid","Timesheet","props","startTimeEntry","index","updateTimeProp","x","completeTimeEntry","updateTime","setTime","func","updateEntry","updateSummary","updateIsBreak","isBreak","state","entries","loadEntries","isCopyMode","rowClass","entry","dateHeader","className","isSame","class","format","list","map","Fragment","summary","type","ref","timestampRef","autoFocus","maxlength","onChange","event","target","onFocus","onBlur","onKeyDown","arrowKeyFocus","summaryRef","isLast","title","onClick","e","resumeEntry","icon","faPlay","resumeButton","length","faPause","removeEntry","faTrashAlt","copyModeClass","addEntry","disabled","faPlus","toggleCopyMode","faFileAlt","clearAllEntries","field","newIndex","keyCode","trim","current","focus","valueFunc","sort","a","b","getSortable","setStateWrapper","sourceEntry","text","startsWith","push","createEntry","React","createRef","splice","setState","confirmAlert","message","buttons","label","saveEntries","savedEntries","localStorage","setItem","JSON","stringify","parse","getItem","i","Component","App","href","rel","aria-label","xmlns","viewBox","focusable","d","fill","fill-rule","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7f34c427.chunk.js","sourcesContent":["import moment from 'moment';\n\nconst dateTo4DigitTime = value =>\n    value.getHours() * 100 + value.getMinutes();\nconst insertColon = (value) =>\n    value.slice(0, 2) + \":\" + value.slice(2);\nconst pad = (value) => value.toString().padStart(4, \"0\");\nconst timeIsValid = value =>\n    value && !isNaN(value)\n    && 0 <= parseInt(value)\n    && parseInt(value) <= 2359\n    && parseInt(value.slice(-2)) < 60;\n\nexport default class Timestamp {\n    /**\n     * @param {Date} timestamp \n     */\n    constructor(timestamp) {\n        if (timestamp instanceof Date) {\n            this.date = moment(new Date(\n                timestamp.getFullYear(),\n                timestamp.getMonth(),\n                timestamp.getDate()));\n            this.time = dateTo4DigitTime(timestamp);\n            this.sorttime = this.time;\n            this.isMidEntry = false;\n        }\n        else {\n            this.date = moment(new Date(timestamp.date));\n            this.time = timestamp.time;\n            this.sorttime = timestamp.sorttime;\n            this.setIsMidEntry(false);\n        }\n    }\n\n    toObject = () => {\n        return {\n            date: this.date,\n            time: this.time,\n            sorttime: this.sorttime\n        };\n    }\n\n    getSortable() {\n        const timestring = pad(this.sorttime);\n        const hours = parseInt(timestring.slice(0, 2));\n        const minutes = parseInt(timestring.slice(2)) + (hours * 60);\n        return moment(this.date).add(minutes, 'm');\n    }\n\n    startEntry = () => this.setIsMidEntry(true);\n    completeEntry = () => this.setIsMidEntry(false);\n\n    renderTime = (options) => this.isMidEntry\n        ? this.time.toString()\n        : options && options.includeColon\n            ? insertColon(pad(this.time))\n            : pad(this.time);\n\n    setIsMidEntry(value) {\n        this.isMidEntry = value;\n        if (!value) {\n            if (timeIsValid(this.time.toString())) {\n                this.sorttime = this.time;\n            } else {\n                this.time = this.sorttime;\n            }\n        }\n        return this;\n    }\n\n    setTime(value) {\n        if (!value) {\n            value = 0;\n        }\n        if (!isNaN(value)) {\n            this.time = parseInt(value);\n        }\n        return this;\n    }\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileAlt, faPlay, faPlus, faPause, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport Timestamp from './dataTypes/Timestamp.js';\n\nexport default class Timesheet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            entries: this.loadEntries(),\n            isCopyMode: false,\n        };\n    }\n    render() {\n        const rowClass = entry =>\n            \"input-group\"\n            + (entry.isBreak ? \" break-entry\" : \"\");\n        const resumeButton = (entry, index, isLast) => isLast\n            ? \"\"\n            : (\n                <button class=\"btn btn-outline-secondary\" type=\"button\"\n                        title=\"Add a new entry to resume this task.\"\n                        onClick={e => this.resumeEntry(index)}>\n                    <FontAwesomeIcon icon={faPlay} />\n                </button>\n            );\n        const dateHeader = (entry, index, className) =>\n            index === 0 || !this.state.entries[index - 1].timestamp.date.isSame(entry.timestamp.date)\n                ? (\n                <div class={\"border-bottom mt-4 mb-2 \" + className}>\n                    <small>{entry.timestamp.date.format(\"YYYY-MM-DD dddd\")}</small>\n                </div>\n                )\n                : \"\";\n        const editModeMapping = (entry, index) => (\n            <React.Fragment>\n                {dateHeader(entry, index)}\n                <div class={rowClass(entry)}>\n                    <input type=\"text\" class=\"form-control timestamp\"\n                        ref={entry.timestampRef}\n                        autoFocus\n                        maxlength=\"4\"\n                        value={entry.timestamp.renderTime()}\n                        onChange={(event) => this.updateTime(index, event.target.value)}\n                        onFocus={() => this.startTimeEntry(index)}\n                        onBlur={() => this.completeTimeEntry(index)}\n                        onKeyDown={(event) => this.arrowKeyFocus(index, event, \"timestamp\")} />\n                    <input type=\"text\" class=\"form-control\"\n                        ref={entry.summaryRef}\n                        value={entry.summary}\n                        onChange={(event) => this.updateSummary(index, event.target.value)}\n                        onKeyDown={(event) => this.arrowKeyFocus(index, event, \"summary\")} />\n                    <div class=\"input-group-append\">\n                        {resumeButton(entry, index, index === this.state.entries.length - 1)}\n                        <button class={\"btn \" + (entry.isBreak ? \"btn-secondary\" : \"btn-outline-secondary\")} type=\"button\"\n                            title=\"Toggle break.\"\n                            onClick={e => this.updateIsBreak(index)}>\n                                <FontAwesomeIcon icon={faPause} />\n                            </button>\n                        <button class=\"btn btn-outline-danger\" type=\"button\"\n                            title=\"Remove entry.\"\n                            onClick={(e) => this.removeEntry(index)}>\n                                <FontAwesomeIcon icon={faTrashAlt} />\n                        </button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n        const copyModeMapping = (entry, index) => (\n            <React.Fragment>\n                {dateHeader(entry, index, \"row\")}    \n                <div class={\"row\" + (entry.isBreak ? \" break-entry\" : \"\")}>\n                    <div class=\"col-xs-1 m-2\">\n                        {entry.timestamp.renderTime({includeColon: true})}\n                    </div>\n                    <div class=\"col m-2\">\n                        {entry.summary}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n        const list = this.state.entries.map(\n            this.state.isCopyMode ? copyModeMapping : editModeMapping);\n        const copyModeClass = \"btn ml-1 \" + (this.state.isCopyMode\n             ? \"btn-secondary\"\n             : \"btn-outline-secondary\");\n        return (\n            <div class=\"container\">\n                {list}\n                <div class=\"mt-2\">\n                    <button class=\"btn btn-primary\" type='button'\n                        title=\"Add an entry.\"\n                        onClick={() => this.addEntry()}\n                        disabled={this.state.isCopyMode}>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </button> \n                    <button class=\"btn btn-secondary ml-1\" type=\"button\"\n                        title=\"Take a break.\"\n                        onClick={(e) => this.addEntry(\"Break\", true)}\n                        disabled={this.state.isCopyMode}>\n                        <FontAwesomeIcon icon={faPause} />\n                    </button>\n                    <button class={copyModeClass} type=\"button\"\n                        title=\"Toggle Copy/Report Mode\"\n                        onClick={() => this.toggleCopyMode()}>\n                        <FontAwesomeIcon icon={faFileAlt} />\n                    </button>\n                    <button class=\"btn btn-danger ml-1\" type=\"button\"\n                        title=\"Clear all entries.\"\n                        onClick={() => this.clearAllEntries()}>\n                        <FontAwesomeIcon icon={faTrashAlt} />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n    \n    arrowKeyFocus(index, event, field) {\n        let newIndex = index;\n        if (event.keyCode === 38) { // up\n            if (index <= 0) return;\n            newIndex -= 1;\n        }\n        else if (event.keyCode === 40 || event.keyCode === 13) { // down or enter\n            if (index >= this.state.entries.length - 1) {\n                // only add if the last entry has text\n                if (this.state.entries[index].summary.trim() !== \"\") {\n                    this.addEntry();\n                }\n                return;\n            }\n            newIndex += 1;\n        }\n        else {\n            return;\n        }\n        this.state.entries[newIndex][field + \"Ref\"].current.focus();\n    }\n\n    startTimeEntry = (index) =>\n        this.updateTimeProp(index, x => x.startEntry());\n    \n    completeTimeEntry = (index) =>\n        this.updateTimeProp(index, x => x.completeEntry());\n    \n    updateTime = (index, value) =>\n        this.updateTimeProp(index, x => x.setTime(value));\n    \n    updateTimeProp = (index, func) =>\n        this.updateEntry(\n            index,\n            \"timestamp\",\n             x => func(x.timestamp));\n\n    updateSummary = (index, value) =>\n        this.updateEntry(index, \"summary\", value);\n    \n    updateIsBreak = (index) =>\n        this.updateEntry(index, \"isBreak\", x => !x.isBreak);\n\n    updateEntry(index, field, valueFunc) {\n        if (typeof(valueFunc) !== \"function\") {\n            const value = valueFunc;\n            valueFunc = x => value;\n        }\n        let entries = this.state.entries;\n        entries[index][field] = valueFunc(entries[index]);\n        entries.sort((a, b) =>\n            a.timestamp.getSortable() - b.timestamp.getSortable());\n        this.setStateWrapper({entries});\n    }\n\n    resumeEntry(index) {\n        const resumeText = \"Resume \";\n        var sourceEntry = this.state.entries[index];\n        var text = sourceEntry.summary;\n        text = !text.startsWith(resumeText) ? resumeText + text : text;\n        this.addEntry(text, sourceEntry.isBreak);\n    }\n\n    addEntry(text, isBreak) {\n        if (!text) {\n            text = '';\n        }\n        let entries = this.state.entries;\n        entries.push(this.createEntry({\n            timestamp: new Timestamp(new Date()),\n            summary: text,\n            isBreak: !!isBreak\n        }));\n        this.setStateWrapper({entries});\n    }\n\n    createEntry(props) {\n        return {\n            timestamp: props.timestamp,\n            summary: props.summary,\n            isBreak: !!props.isBreak,\n\n            timestampRef: React.createRef(),\n            summaryRef: React.createRef()\n        };\n    }\n\n    removeEntry(index) {\n        let entries = this.state.entries;\n        entries.splice(index, 1);\n        this.setStateWrapper({entries});\n    }\n\n    toggleCopyMode() {\n        let isCopyMode = !this.state.isCopyMode;\n        this.setState({isCopyMode});\n    }\n\n    clearAllEntries() {\n        confirmAlert({\n            title: \"Clear all entries\",\n            message: \"Are you sure?\",\n            buttons: [\n                {\n                    label: \"Yes, Clear\",\n                    onClick: () => {\n                        const entries = [];\n                        this.setState({entries});\n                    }\n                },\n                {\n                    label: \"No, Cancel\"\n                }\n            ]\n        });\n    }\n\n    setStateWrapper(state) {\n        this.setState(state);\n        this.saveEntries(this.state.entries);\n    }\n\n    saveEntries(entries) {\n        const savedEntries = entries.map(entry => {\n            return {\n                timestamp: entry.timestamp.toObject(),\n                summary: entry.summary,\n                isBreak: entry.isBreak\n            };\n        });\n        localStorage.setItem(\"entries\", JSON.stringify(savedEntries));\n    }\n\n    loadEntries() {\n        let entries = JSON.parse(localStorage.getItem(\"entries\"));\n        if (entries) {\n            // re-cast timestamps according to class\n            for(let i = 0; i < entries.length; i++) {\n                entries[i].timestamp = new Timestamp(entries[i].timestamp);\n                entries[i] = this.createEntry(entries[i]);\n            }\n        }\n        return entries || [];\n    }\n}\n","import React from 'react';\nimport Timesheet from './Timesheet.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <a class=\"navbar-brand\" href=\".\">\n          Timestamper\n        </a>\n\n        <a class=\"nav-link p-2\" href=\"https://github.com/aaaantoine/timestamper\" target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"GitHub\">\n          <svg class=\"navbar-nav-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 499.36\" focusable=\"false\">\n            <title>GitHub</title>\n            <path d=\"M256 0C114.64 0 0 114.61 0 256c0 113.09 73.34 209 175.08 242.9 12.8 2.35 17.47-5.56 17.47-12.34 0-6.08-.22-22.18-.35-43.54-71.2 15.49-86.2-34.34-86.2-34.34-11.64-29.57-28.42-37.45-28.42-37.45-23.27-15.84 1.73-15.55 1.73-15.55 25.69 1.81 39.21 26.38 39.21 26.38 22.84 39.12 59.92 27.82 74.5 21.27 2.33-16.54 8.94-27.82 16.25-34.22-56.84-6.43-116.6-28.43-116.6-126.49 0-27.95 10-50.8 26.35-68.69-2.63-6.48-11.42-32.5 2.51-67.75 0 0 21.49-6.88 70.4 26.24a242.65 242.65 0 0 1 128.18 0c48.87-33.13 70.33-26.24 70.33-26.24 14 35.25 5.18 61.27 2.55 67.75 16.41 17.9 26.31 40.75 26.31 68.69 0 98.35-59.85 120-116.88 126.32 9.19 7.9 17.38 23.53 17.38 47.41 0 34.22-.31 61.83-.31 70.23 0 6.85 4.61 14.81 17.6 12.31C438.72 464.97 512 369.08 512 256.02 512 114.62 397.37 0 256 0z\" fill=\"currentColor\" fill-rule=\"evenodd\"></path>\n          </svg>\n        </a>\n      </nav>\n      \n      <Timesheet />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}